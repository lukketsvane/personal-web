### File Location: /workspaces/personal-web/iverfinne.no/app/api/posts/route.ts ###

import { NextResponse } from 'next/server'
import { getAllPosts } from '@/lib/mdx-utils'
import { Post } from '@/types/post'

export async function GET() {
  try {
    const posts: Post[] = await getAllPosts()
    return NextResponse.json(posts)
  } catch (error) {
    console.error('Error fetching posts:', error)
    return NextResponse.json({ error: 'Failed to fetch posts' }, { status: 500 })
  }
}

---

### File Location: /workspaces/personal-web/iverfinne.no/app/layout.tsx ###

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


---

### File Location: /workspaces/personal-web/iverfinne.no/app/page.tsx ###

import MDXBlogWrapper from '@/components/mdx-blog-wrapper'

export default function Home() {
  return (
    <div className="container mx-auto px-4 py-8">
      <MDXBlogWrapper />
    </div>
  )
}

---

### File Location: /workspaces/personal-web/iverfinne.no/components/WebDesignKeys.tsx ###

'use client'

import React, { useState } from 'react'
import { Loader2 } from 'lucide-react'

export function WebDesignKeys() {
  const [isDark, setIsDark] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  
  const handleClick = () => {
    setIsDark(!isDark)
  }

  const handleLoad = () => {
    setIsLoading(false)
  }

  return (
    <div className="w-full h-full relative" onClick={handleClick}>
     
     <iframe src='https://my.spline.design/floatingcards-ed186cc3661bffb7e71bf6ac40e56185/' frameBorder='0' width='100%' height='100%'></iframe>
    </div>
  )
}

export default WebDesignKeys



---

### File Location: /workspaces/personal-web/iverfinne.no/components/mdx-blog-wrapper.tsx ###

"use client"

import { useEffect, useState } from 'react'
import MDXBlog from '@/components/mdx-blog'

interface Post {
  title: string
  description: string
  date: string
  tags: string[] | string | undefined
  slug: string
  type: "writing" | "books" | "projects" | "outgoing_links"
  image?: string
  content: string
}

export default function MDXBlogWrapper() {
  const [posts, setPosts] = useState<Post[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function fetchPosts() {
      try {
        const response = await fetch('/api/posts')
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`)
        }
        const data = await response.json()
        console.log('Fetched posts:', data)
        setPosts(data)
      } catch (error) {
        console.error('Error fetching posts:', error)
        setError('Failed to fetch posts. Please try again later.')
      } finally {
        setIsLoading(false)
      }
    }

    fetchPosts()
  }, [])

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (error) {
    return <div className="text-red-500">{error}</div>
  }

  return posts.length > 0 ? (
    <MDXBlog initialPosts={posts} />
  ) : (
    <p>No posts found.</p>
  )
}



---

### File Location: /workspaces/personal-web/iverfinne.no/components/mdx-blog.tsx ###

'use client'

import { useState, useEffect, useMemo } from "react"
import Image from "next/image"
import { Search } from 'lucide-react'
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote'
import { serialize } from 'next-mdx-remote/serialize'
import remarkGfm from 'remark-gfm'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from "@/lib/utils"
import dynamic from 'next/dynamic'

const WebDesignKeys = dynamic(() => import('@/components/WebDesignKeys'), {
  ssr: false,
  loading: () => <p>Loading 3D Scene...</p>
})

interface Post {
  title: string
  description: string
  date: string
  tags: string[] | string | undefined
  slug: string
  type: "writing" | "books" | "projects" | "outgoing_links"
  image?: string
  coverimage?: string
  content: string
  url?: string
  icon?: string
}

const contentTypes = [
  { label: "Writing", value: "writing", color: "bg-blue-500 text-white" },
  { label: "Books", value: "books", color: "bg-green-500 text-white" },
  { label: "Projects", value: "projects", color: "bg-purple-500 text-white" },
  { label: "Outgoing Links", value: "outgoing_links", color: "bg-orange-500 text-white" },
]

const categories = [
  { label: "ai", value: "ai", color: "bg-red-500 text-white" },
  { label: "no code", value: "no-code", color: "bg-yellow-500 text-white" },
  { label: "vc", value: "vc", color: "bg-green-500 text-white" },
  { label: "web3", value: "web3", color: "bg-purple-500 text-white" },
  { label: "art", value: "art", color: "bg-pink-500 text-white" },
  { label: "dev", value: "dev", color: "bg-blue-500 text-white" },
]

const FilterButton = ({ label, isActive, onClick, color, variant = "default" }: { 
  label: string
  isActive: boolean
  onClick: () => void
  color?: string
  variant?: "type" | "category" | "default"
}) => {
  const baseStyles = "text-xs px-3 py-1 h-auto font-normal transition-colors"
  const variantStyles = {
    type: cn(
      "hover:bg-gray-100 dark:hover:bg-gray-800",
      isActive ? color : "text-gray-600 dark:text-gray-400"
    ),
    category: cn(
      "hover:bg-gray-100 dark:hover:bg-gray-800",
      isActive ? color : "text-gray-600 dark:text-gray-400"
    ),
    default: "bg-gray-100/50 hover:bg-gray-200/50 text-gray-600"
  }

  return (
    <Button
      variant="ghost"
      size="sm"
      onClick={onClick}
      className={cn(
        baseStyles,
        variantStyles[variant],
        "rounded-full"
      )}
    >
      {label}
    </Button>
  )
}

const TimelineConnector = () => (
  <div className="absolute left-0 w-0.5 top-5 bottom-0 bg-gray-200 dark:bg-gray-700 -translate-x-1/2" />
)

const TimelineNode = ({ type }: { type: string }) => {
  const typeColor = contentTypes.find(t => t.value === type)?.color.split(' ')[0] || "bg-gray-500"
  return (
    <div className={cn(
      "absolute left-0 top-1 w-4 h-4 rounded-full -translate-x-1/2 border-2 border-white dark:border-gray-900 z-10",
      typeColor
    )} />
  )
}

const PostItem = ({ post, isExpanded, onToggle }: { 
  post: Post
  isExpanded: boolean
  onToggle: () => void 
}) => {
  const [serializedContent, setSerializedContent] = useState<MDXRemoteSerializeResult | null>(null)

  useEffect(() => {
    if (isExpanded && !serializedContent) {
      serialize(post.content, { 
        mdxOptions: {
          remarkPlugins: [remarkGfm],
          format: 'mdx',
          development: false,
        },
        parseFrontmatter: true,
      }).then((result) => setSerializedContent(result))
    }
  }, [isExpanded, post.content, serializedContent])

  const tagColors = useMemo(() => {
    if (!Array.isArray(post.tags)) return {}
    return post.tags.reduce((acc, tag) => {
      const category = categories.find(c => c.value === tag.toLowerCase())
      acc[tag] = category?.color || "bg-gray-500 text-white"
      return acc
    }, {} as Record<string, string>)
  }, [post.tags])

  return (
    <div className="relative grid grid-cols-[auto,1fr] gap-4">
      <div className="text-right text-xs text-gray-500 dark:text-gray-400 pt-1 pr-4 w-24">
        {new Date(post.date).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' })}
      </div>
      <div className="relative">
        <TimelineNode type={post.type} />
        <TimelineConnector />
        <div className="pb-8">
          <motion.article 
            className={cn(
              "relative rounded-lg p-4 cursor-pointer transition-all", 
              isExpanded ? "bg-blue-50 dark:bg-gray-800" : "hover:bg-gray-50 dark:hover:bg-gray-800",
              post.type === "outgoing_links" && "hover:cursor-alias"
            )}
            onClick={() => {
              if (post.type === "outgoing_links" && post.url) {
                window.open(post.url, '_blank')
              } else {
                onToggle()
              }
            }}
            initial={false}
            animate={{ backgroundColor: isExpanded ? "#f0f9ff" : "transparent" }}
            transition={{ type: "spring", stiffness: 100, damping: 15 }}
          >
            <div className="flex items-center gap-4 mb-2">
              {post.type === "books" && post.icon && (
                <div className="relative w-16 h-16 shrink-0">
                  <Image
                    src={post.icon}
                    alt=""
                    fill
                    unoptimized
                    className="object-cover rounded-sm"
                    sizes="64px"
                  />
                </div>
              )}
              <h2 className="text-lg font-semibold">{post.title}</h2>
            </div>
            <p className="text-gray-600 dark:text-gray-300 mb-2 text-sm">
              {post.description}
            </p>
            <div className="flex gap-2 mb-2">
              {Array.isArray(post.tags) 
                ? post.tags.slice(0, 2).map((tag) => (
                    <Badge 
                      key={tag} 
                      className={cn("text-xs rounded-full", tagColors[tag])}
                    >
                      {tag}
                    </Badge>
                  ))
                : post.tags && (
                    <Badge className="text-xs rounded-full bg-gray-500 text-white">
                      {post.tags}
                    </Badge>
                  )
              }
              {Array.isArray(post.tags) && post.tags.length > 2 && (
                <span className="text-xs text-gray-500">+{post.tags.length - 2}</span>
              )}
            </div>
            <AnimatePresence>
              {isExpanded && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: "auto" }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ type: "spring", stiffness: 100, damping: 15 }}
                  className="overflow-hidden mt-2"
                >
                  {post.slug === "aho-slot" ? (
                    <div className="w-full aspect-[4/5] rounded-lg overflow-hidden">
                      <iframe
                        src="https://aho-slot.vercel.app/"
                        className="w-full h-full border-0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                      />
                    </div>
                  ) : post.slug === "web-design-keys" ? (
                    <div className="w-full aspect-[4/5] rounded-lg overflow-hidden">
                      <WebDesignKeys />
                    </div>
                  ) : (
                    <div className="prose dark:prose-invert max-w-none text-sm">
                      {serializedContent && (
                        <MDXRemote
                          {...serializedContent}
                          components={{
                            h1: (props) => <h1 {...props} className="text-2xl font-bold mt-4 mb-2" />,
                            h2: (props) => <h2 {...props} className="text-xl font-semibold mt-3 mb-2" />,
                            h3: (props) => <h3 {...props} className="text-lg font-medium mt-2 mb-1" />,
                            h4: (props) => <h4 {...props} className="text-base font-medium mt-2 mb-1" />,
                            h5: (props) => <h5 {...props} className="text-sm font-medium mt-2 mb-1" />,
                            h6: (props) => <h6 {...props} className="text-xs font-medium mt-2 mb-1" />,
                          }}
                        />
                      )}
                    </div>
                  )}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.article>
        </div>
      </div>
    </div>
  )
}

export default function MDXBlog({ initialPosts = [] }: { initialPosts?: Post[] }) {
  const [posts] = useState<Post[]>(initialPosts)
  const [search, setSearch] = useState("")
  const [selectedTypes, setSelectedTypes] = useState<string[]>([])
  const [selectedCategories, setSelectedCategories] = useState<string[]>([])
  const [expandedPost, setExpandedPost] = useState<string | null>(null)

  const filteredPosts = useMemo(() => {
    return posts.filter((post) => {
      const matchesSearch = post.title.toLowerCase().includes(search.toLowerCase()) ||
                            post.description.toLowerCase().includes(search.toLowerCase())
      const matchesTypes = selectedTypes.length === 0 || selectedTypes.includes(post.type)
      const matchesCategories = selectedCategories.length === 0 || 
                                (Array.isArray(post.tags) && post.tags.some(tag => selectedCategories.includes(tag.toLowerCase())))
      return matchesSearch && matchesTypes && matchesCategories
    })
  }, [posts, search, selectedTypes, selectedCategories])

  return (
    <div className="flex flex-col lg:flex-row gap-4 p-4">
      <aside className="w-full lg:w-48 space-y-4">
        <div className="space-y-2">
          <h2 className="text-xs font-medium text-gray-500 lowercase">type</h2>
          <div className="flex flex-wrap gap-1.5">
            {contentTypes.map((type) => (
              <FilterButton
                key={type.value}
                label={type.label}
                isActive={selectedTypes.includes(type.value)}
                onClick={() => {
                  setSelectedTypes((prev) =>
                    prev.includes(type.value)
                      ? prev.filter((t) => t !== type.value)
                      : [...prev, type.value]
                  )
                }}
                color={type.color}
                variant="type"
              />
            ))}
          </div>
        </div>
        <div className="space-y-2">
          <h2 className="text-xs font-medium text-gray-500 lowercase">categories</h2>
          <div className="flex flex-wrap gap-1.5">
            {categories.map((category) => (
              <FilterButton
                key={category.value}
                label={category.label}
                isActive={selectedCategories.includes(category.value)}
                onClick={() => {
                  setSelectedCategories((prev) =>
                    prev.includes(category.value)
                      ? prev.filter((c) => c !== category.value)
                      : [...prev, category.value]
                  )
                }}
                color={category.color}
                variant="category"
              />
            ))}
          </div>
        </div>
      </aside>
      <main className="flex-1 space-y-4">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400 dark:text-gray-500" />
          <Input
            placeholder="Type here to search"
            className="pl-10 py-2 text-sm"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
        </div>
        <motion.div 
          className="relative mt-4"
          layout
          transition={{ type: "spring", stiffness: 100, damping: 15 }}
        >
          {filteredPosts.length > 0 ? (
            filteredPosts.map((post) => (
              <PostItem 
                key={post.slug} 
                post={post} 
                isExpanded={expandedPost === post.slug}
                onToggle={() => setExpandedPost(expandedPost === post.slug ? null : post.slug)}
              />
            ))
          ) : (
            <p className="text-gray-500 dark:text-gray-400 text-sm">No posts found matching your criteria.</p>
          )}
        </motion.div>
      </main>
    </div>
  )
}



---

### File Location: /workspaces/personal-web/iverfinne.no/components/outgoing-link.tsx ###

import React from 'react'
import Link from 'next/link'
import { ExternalLink } from 'lucide-react'
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { formatDate } from '@/lib/utils'
import dynamic from 'next/dynamic'

const WebDesignKeys = dynamic(() => import('@/components/WebDesignKeys'), {
  ssr: false,
  loading: () => <p>Loading 3D Scene...</p>
})

interface OutgoingLink {
  title: string
  description: string
  date: string
  tags: string[]
  type: string
  category: string
  url: string
  slug: string
}

interface OutgoingLinksGridProps {
  links: OutgoingLink[]
}

export default function OutgoingLinksGrid({ links }: OutgoingLinksGridProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {links.map((link) => (
        <Card key={link.url} className="flex flex-col">
          <CardHeader>
            <CardTitle className="text-lg font-semibold">
              <Link 
                href={link.url} 
                target="_blank" 
                rel="noopener noreferrer" 
                className="hover:underline flex items-center gap-2 text-primary"
                aria-label={`${link.title} (opens in a new tab)`}
              >
                {link.title}
                <ExternalLink className="h-4 w-4" aria-hidden="true" />
              </Link>
            </CardTitle>
            <CardDescription>{link.description}</CardDescription>
          </CardHeader>
          <CardContent className="flex-grow">
            <p className="text-sm text-muted-foreground mb-2">
              <time dateTime={link.date}>{formatDate(link.date)}</time>
            </p>
            <div className="flex flex-wrap gap-2">
              {link.tags.map((tag) => (
                <Badge key={tag} variant="secondary" className="text-xs">
                  {tag}
                </Badge>
              ))}
            </div>
            {link.slug === 'web-design-keys' && (
              <div className="mt-4 w-full aspect-[4/5] rounded-lg overflow-hidden">
                <WebDesignKeys />
              </div>
            )}
          </CardContent>
          <CardFooter className="flex justify-between items-center">
            <Badge variant="outline" className="text-xs capitalize">
              {link.category}
            </Badge>
            <Badge variant="outline" className="text-xs capitalize">
              {link.type}
            </Badge>
          </CardFooter>
        </Card>
      ))}
    </div>
  )
}

---

### File Location: /workspaces/personal-web/iverfinne.no/components/sphere-viewer.tsx ###

'use client'

import { useState } from 'react'
import { Card } from "@/components/ui/card"
import { Loader2 } from 'lucide-react'

export default function Component() {
  const [isLoading, setIsLoading] = useState(true)

  return (
    <Card className="w-full max-w-4xl mx-auto overflow-hidden">
      <div className="relative w-full aspect-square bg-black">
        {isLoading && (
          <div className="absolute inset-0 flex items-center justify-center">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        )}
        <iframe
          src="https://sphere.v0.build/"
          className="w-full h-full border-0"
          onLoad={() => setIsLoading(false)}
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          title="3D Sphere Material Painter"
        />
      </div>
    </Card>
  )
}

---

### File Location: /workspaces/personal-web/iverfinne.no/components/ui/badge.tsx ###

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


---

### File Location: /workspaces/personal-web/iverfinne.no/components/ui/button.tsx ###

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


---

### File Location: /workspaces/personal-web/iverfinne.no/components/ui/card.tsx ###

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


---

### File Location: /workspaces/personal-web/iverfinne.no/components/ui/input.tsx ###

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


---

### File Location: /workspaces/personal-web/iverfinne.no/lib/mdx-utils.ts ###

import fs from 'fs/promises'
import path from 'path'
import matter from 'gray-matter'
import { Post } from '@/types/post'

export async function getAllPosts(): Promise<Post[]> {
  const contentTypes = ['writing', 'books', 'projects', 'outgoing_links'] as const
  const posts: Post[] = []

  for (const type of contentTypes) {
    const filesPath = path.join(process.cwd(), type)
    console.log(`Checking directory: ${filesPath}`)
    
    try {
      const files = await fs.readdir(filesPath)
      console.log(`Found ${files.length} files in ${type}`)

      for (const file of files) {
        if (path.extname(file) === '.mdx') {
          const filePath = path.join(filesPath, file)
          console.log(`Processing file: ${filePath}`)
          
          try {
            const fileContents = await fs.readFile(filePath, 'utf8')
            const { data, content } = matter(fileContents)
            
            const imageMatch = content.match(/!\[.*?\]$$(.*?)$$/)
            const image = imageMatch ? imageMatch[1] : undefined

            posts.push({
              title: data.title || 'Untitled',
              description: data.description || '',
              date: data.date ? new Date(data.date).toISOString() : new Date().toISOString(),
              tags: Array.isArray(data.tags) ? data.tags : data.tags ? [data.tags] : [],
              slug: file.replace(/\.mdx$/, ''),
              type: type,
              image: image,
              content: content,
            })
          } catch (error) {
            console.error(`Error processing file ${filePath}:`, error)
          }
        }
      }
    } catch (error) {
      console.error(`Error reading directory ${filesPath}:`, error)
    }
  }

  console.log(`Total posts processed: ${posts.length}`)
  return posts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
}

---

### File Location: /workspaces/personal-web/iverfinne.no/tailwind.config.ts ###

import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;


---

