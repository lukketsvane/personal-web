### File Location: /workspaces/personal-web/iverfinne.no/app/api/posts/route.ts ###

import { NextResponse } from 'next/server'
import { getAllPosts } from './utils/posts'
import { Post } from '@/types/post'

export async function GET() {
  try {
    const posts: Post[] = await getAllPosts()
    if (posts.length === 0) {
      return NextResponse.json({ 
        message: 'No posts found. Make sure you have .mdx files in the content directories.',
        setup: 'To add posts, create .mdx files in the content/projects, content/writing, content/books, or content/outgoing_links directories with appropriate frontmatter.'
      }, { status: 404 })
    }
    return NextResponse.json(posts)
  } catch (error) {
    console.error('Error fetching posts:', error)
    return NextResponse.json({ error: 'Failed to fetch posts' }, { status: 500 })
  }
}



---

### File Location: /workspaces/personal-web/iverfinne.no/app/layout.tsx ###

import type { Metadata } from 'next'
import './globals.css'

const APP_NAME = 'iverfinne.no'
const APP_DEFAULT_TITLE = 'iverfinne.no'
const APP_TITLE_TEMPLATE = '%s - iverfinne.no'
const APP_DESCRIPTION = 'Personal website and blog'

export const metadata: Metadata = {
  applicationName: APP_NAME,
  title: {
    default: APP_DEFAULT_TITLE,
    template: APP_TITLE_TEMPLATE,
  },
  description: APP_DESCRIPTION,
  manifest: '/manifest.json',
  appleWebApp: {
    capable: true,
    statusBarStyle: 'default',
    title: APP_DEFAULT_TITLE,
  },
  formatDetection: {
    telephone: false,
  },
  openGraph: {
    type: 'website',
    siteName: APP_NAME,
    title: {
      default: APP_DEFAULT_TITLE,
      template: APP_TITLE_TEMPLATE,
    },
    description: APP_DESCRIPTION,
  },
  twitter: {
    card: 'summary',
    title: {
      default: APP_DEFAULT_TITLE,
      template: APP_TITLE_TEMPLATE,
    },
    description: APP_DESCRIPTION,
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link
          rel="preload"
          href="/fonts/GeistVF.woff"
          as="font"
          type="font/woff"
          crossOrigin="anonymous"
        />
        <link
          rel="preload"
          href="/fonts/GeistMonoVF.woff"
          as="font"
          type="font/woff"
          crossOrigin="anonymous"
        />
      </head>
      <body>{children}</body>
    </html>
  )
}



---

### File Location: /workspaces/personal-web/iverfinne.no/app/page.tsx ###

import MDXBlogWrapper from '@/components/mdx-blog-wrapper'

export default function Home() {
  return (
    <div className="container w-screen px-4 py-8">
      <MDXBlogWrapper />
    </div>
  )
}



---

### File Location: /workspaces/personal-web/iverfinne.no/components/WebDesignKeys.tsx ###

'use client'

import React, { useState } from 'react'
import { Loader2 } from 'lucide-react'

export function WebDesignKeys() {
  const [isDark, setIsDark] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  
  const handleClick = () => {
    setIsDark(!isDark)
  }

  const handleLoad = () => {
    setIsLoading(false)
  }

  return (
    <div className="w-full h-full relative" onClick={handleClick}>
     
     <iframe src='https://my.spline.design/floatingcards-ed186cc3661bffb7e71bf6ac40e56185/' frameBorder='0' width='100%' height='100%'></iframe>
    </div>
  )
}

export default WebDesignKeys



---

### File Location: /workspaces/personal-web/iverfinne.no/components/mdx-blog-wrapper.tsx ###

'use client'

import { useEffect, useState } from 'react'
import MDXBlog from '@/components/mdx-blog'

interface Post {
  title: string
  description: string
  date: string
  tags: string[] | string | undefined
  slug: string
  type: "writing" | "books" | "projects" | "outgoing_links"
  image?: string
  content: string
  thumbnails?: { src: string; alt: string }[]
}

export default function MDXBlogWrapper() {
  const [posts, setPosts] = useState<Post[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function fetchPosts() {
      try {
        const response = await fetch('/api/posts')
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`)
        }
        const data = await response.json()
        console.log('Fetched posts:', data)
        setPosts(data)
      } catch (error) {
        console.error('Error fetching posts:', error)
        setError('Failed to fetch posts. Please try again later.')
      } finally {
        setIsLoading(false)
      }
    }

    fetchPosts()
  }, [])

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (error) {
    return <div>{error}</div>
  }

  return posts.length > 0 ? (
    <MDXBlog initialPosts={posts} />
  ) : (
    <p>No posts found.</p>
  )
}



---

### File Location: /workspaces/personal-web/iverfinne.no/components/mdx-blog.tsx ###

'use client'

import { useState, useEffect, useMemo } from "react"
import { Search } from 'lucide-react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { serialize } from 'next-mdx-remote/serialize'
import remarkGfm from 'remark-gfm'
import { motion } from 'framer-motion'
import { cn } from "@/lib/utils"
import { MDXCard } from "./mdx-card"
import type { MDXRemoteSerializeResult } from 'next-mdx-remote'

interface Post {
  title: string
  description: string
  date: string
  tags: string[] | string | undefined
  slug: string
  type: "writing" | "books" | "projects" | "outgoing_links"
  image?: string
  coverimage?: string
  content: string
  url?: string
  icon?: string
  thumbnails?: { src: string; alt: string }[]
}

const contentTypes = [
  { label: "Writing", value: "writing", color: "bg-blue-500 text-white" },
  { label: "Books", value: "books", color: "bg-green-500 text-white" },
  { label: "Projects", value: "projects", color: "bg-purple-500 text-white" },
  { label: "Outgoing Links", value: "outgoing_links", color: "bg-orange-500 text-white" },
]

interface FilterButtonProps {
  label: string
  isActive: boolean
  onClick: () => void
  color?: string
  variant?: "type" | "tag" | "default"
}

const FilterButton = ({ label, isActive, onClick, color, variant = "default" }: FilterButtonProps) => {
  const bgColorClass = color?.split(' ')[0]
  
  const baseStyles = "text-xs px-3 py-1 h-auto font-normal transition-colors"
  const variantStyles = {
    type: cn(
      "hover:bg-opacity-20 dark:hover:bg-opacity-20",
      isActive 
        ? color 
        : cn(bgColorClass, "bg-opacity-10 text-gray-600 dark:text-gray-400")
    ),
    tag: cn(
      "hover:bg-opacity-20 dark:hover:bg-opacity-20",
      isActive 
        ? color 
        : cn(bgColorClass, "bg-opacity-10 text-gray-600 dark:text-gray-400")
    ),
    default: "bg-gray-100/50 hover:bg-gray-200/50 text-gray-600"
  }

  return (
    <Button
      variant="ghost"
      size="sm"
      onClick={onClick}
      className={cn(
        baseStyles,
        variantStyles[variant],
        "rounded-full"
      )}
    >
      {label}
    </Button>
  )
}

interface MDXBlogProps {
  initialPosts?: Post[]
}

export default function MDXBlog({ initialPosts = [] }: MDXBlogProps) {
  const [posts, setPosts] = useState<Post[]>([])
  const [search, setSearch] = useState("")
  const [selectedTypes, setSelectedTypes] = useState<string[]>([])
  const [selectedTags, setSelectedTags] = useState<string[]>([])
  const [expandedPost, setExpandedPost] = useState<string | null>(null)
  const [serializedContents, setSerializedContents] = useState<Record<string, MDXRemoteSerializeResult | null>>({})
  const [error, setError] = useState<string | null>(null)
  const [showAllTags, setShowAllTags] = useState(false)

  const uniqueTags = useMemo(() => {
    const tagSet = new Set<string>()
    posts.forEach(post => {
      if (Array.isArray(post.tags)) {
        post.tags.forEach(tag => tagSet.add(tag.toLowerCase()))
      }
    })
    return Array.from(tagSet).sort()
  }, [posts])

  const displayTags = useMemo(() => {
    return showAllTags ? uniqueTags : uniqueTags.slice(0, 5)
  }, [uniqueTags, showAllTags])

  useEffect(() => {
    setPosts(initialPosts)
  }, [initialPosts])

  useEffect(() => {
    const serializeContent = async (slug: string, content: string) => {
      if (!serializedContents[slug] && expandedPost === slug) {
        try {
          const result = await serialize(content, {
            mdxOptions: {
              remarkPlugins: [remarkGfm],
              format: 'mdx',
              development: process.env.NODE_ENV === 'development',
            },
            parseFrontmatter: true,
          })
          setSerializedContents(prev => ({ ...prev, [slug]: result }))
        } catch (error) {
          console.error('Error serializing MDX for slug:', slug, error)
          setSerializedContents(prev => ({ ...prev, [slug]: null }))
        }
      }
    }

    if (expandedPost) {
      const post = posts.find(p => p.slug === expandedPost)
      if (post?.content) {
        serializeContent(post.slug, post.content)
      }
    }
  }, [expandedPost, posts, serializedContents])

  const filteredPosts = useMemo(() => {
    try {
      return posts.filter((post) => {
        const matchesSearch = (post.title?.toLowerCase() || '').includes(search.toLowerCase()) ||
                            (post.description?.toLowerCase() || '').includes(search.toLowerCase())
        const matchesTypes = selectedTypes.length === 0 || selectedTypes.includes(post.type)
        const matchesTags = selectedTags.length === 0 || 
                          (Array.isArray(post.tags) && post.tags.some(tag => 
                            selectedTags.includes(tag.toLowerCase())
                          ))
        return matchesSearch && matchesTypes && matchesTags
      })
    } catch (err) {
      console.error('Error filtering posts:', err)
      return []
    }
  }, [posts, search, selectedTypes, selectedTags])

  const handlePostToggle = (slug: string) => {
    try {
      setExpandedPost(expandedPost === slug ? null : slug)
    } catch (err) {
      console.error('Error toggling post:', err)
      setError('Failed to expand post')
    }
  }

  return (
    <div className="flex flex-col lg:flex-row gap-4 p-4 max-w-screen overflow-hidden">
      <aside className="w-full lg:w-48 space-y-4 shrink-0">
        <div className="">
          <h2 className="text-xs font-medium text-gray-500 lowercase">type</h2>
          <div className="flex flex-wrap gap-1.5">
            {contentTypes.map((type) => (
              <FilterButton
                key={type.value}
                label={type.label}
                isActive={selectedTypes.includes(type.value)}
                onClick={() => {
                  setSelectedTypes((prev) =>
                    prev.includes(type.value)
                      ? prev.filter((t) => t !== type.value)
                      : [...prev, type.value]
                  )
                }}
                color={type.color}
                variant="type"
              />
            ))}
          </div>
        </div>
        <div className="space-y-2">
          <h2 className="text-xs font-medium text-gray-500 lowercase">tags</h2>
          <div className="flex flex-wrap gap-1.5">
            {displayTags.map((tag) => (
              <FilterButton
                key={tag}
                label={tag}
                isActive={selectedTags.includes(tag)}
                onClick={() => {
                  setSelectedTags((prev) =>
                    prev.includes(tag)
                      ? prev.filter((t) => t !== tag)
                      : [...prev, tag]
                  )
                }}
                color="bg-gray-500 text-white"
                variant="tag"
              />
            ))}
            {uniqueTags.length > 5 && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowAllTags(!showAllTags)}
                className="text-xs px-3 py-1 h-auto font-normal rounded-full text-blue-500 hover:text-blue-600"
              >
                {showAllTags ? 'Show less' : `+${uniqueTags.length - 5} more`}
              </Button>
            )}
          </div>
        </div>
      </aside>
      <main className="flex-1 space-y-4 min-w-0">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400 dark:text-gray-500" />
          <Input
            placeholder="Type here to search"
            className="pl-10 py-2 text-sm"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
        </div>
        <motion.div 
          className="relative mt-4"
          layout
          transition={{ type: "spring", stiffness: 100, damping: 15 }}
        >
          {filteredPosts.length > 0 ? (
            filteredPosts.map((post) => (
              <MDXCard
                key={post.slug}
                post={post}
                isExpanded={expandedPost === post.slug}
                onToggle={() => handlePostToggle(post.slug)}
                serializedContent={serializedContents[post.slug]}
              />
            ))
          ) : (
            <p className="text-gray-500 dark:text-gray-400 text-sm">
              {error ? 'Error loading posts' : 'No posts found matching your criteria.'}
            </p>
          )}
        </motion.div>
      </main>
    </div>
  )
}



---

### File Location: /workspaces/personal-web/iverfinne.no/components/outgoing-link.tsx ###

import React from 'react'
import Link from 'next/link'
import { ExternalLink } from 'lucide-react'
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { formatDate } from '@/lib/utils'
import dynamic from 'next/dynamic'

const WebDesignKeys = dynamic(() => import('@/components/WebDesignKeys'), {
  ssr: false,
  loading: () => <p>Loading 3D Scene...</p>
})

interface OutgoingLink {
  title: string
  description: string
  date: string
  tags: string[]
  type: string
  category: string
  url: string
  slug: string
}

interface OutgoingLinksGridProps {
  links: OutgoingLink[]
}

export default function OutgoingLinksGrid({ links }: OutgoingLinksGridProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {links.map((link) => (
        <Card key={link.url} className="flex flex-col">
          <CardHeader>
            <CardTitle className="text-lg font-semibold">
              <Link 
                href={link.url} 
                target="_blank" 
                rel="noopener noreferrer" 
                className="hover:underline flex items-center gap-2 text-primary"
                aria-label={`${link.title} (opens in a new tab)`}
              >
                {link.title}
                <ExternalLink className="h-4 w-4" aria-hidden="true" />
              </Link>
            </CardTitle>
            <CardDescription>{link.description}</CardDescription>
          </CardHeader>
          <CardContent className="flex-grow">
            <p className="text-sm text-muted-foreground mb-2">
              <time dateTime={link.date}>{formatDate(link.date)}</time>
            </p>
            <div className="flex flex-wrap gap-2">
              {link.tags.map((tag) => (
                <Badge key={tag} variant="secondary" className="text-xs">
                  {tag}
                </Badge>
              ))}
            </div>
            {link.slug === 'web-design-keys' && (
              <div className="mt-4 w-full aspect-[4/5] rounded-lg overflow-hidden">
                <WebDesignKeys />
              </div>
            )}
          </CardContent>
          <CardFooter className="flex justify-between items-center">
            <Badge variant="outline" className="text-xs capitalize">
              {link.category}
            </Badge>
            <Badge variant="outline" className="text-xs capitalize">
              {link.type}
            </Badge>
          </CardFooter>
        </Card>
      ))}
    </div>
  )
}

---

### File Location: /workspaces/personal-web/iverfinne.no/components/ui/badge.tsx ###

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


---

### File Location: /workspaces/personal-web/iverfinne.no/components/ui/button.tsx ###

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


---

### File Location: /workspaces/personal-web/iverfinne.no/components/ui/card.tsx ###

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


---

### File Location: /workspaces/personal-web/iverfinne.no/components/ui/input.tsx ###

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


---

### File Location: /workspaces/personal-web/iverfinne.no/lib/mdx-utils.ts ###

import fs from 'fs/promises'
import path from 'path'
import matter from 'gray-matter'
import { Post } from '@/types/post'

export async function getAllPosts(): Promise<Post[]> {
  const contentTypes = ['writing', 'books', 'projects', 'outgoing_links'] as const
  const posts: Post[] = []

  for (const type of contentTypes) {
    const filesPath = path.join(process.cwd(), type)
    console.log(`Checking directory: ${filesPath}`)
    
    try {
      const files = await fs.readdir(filesPath)
      console.log(`Found ${files.length} files in ${type}`)

      for (const file of files) {
        if (path.extname(file) === '.mdx') {
          const filePath = path.join(filesPath, file)
          console.log(`Processing file: ${filePath}`)
          
          try {
            const fileContents = await fs.readFile(filePath, 'utf8')
            const { data, content } = matter(fileContents)
            
            const imageMatch = content.match(/!\[.*?\]$$(.*?)$$/)
            const image = imageMatch ? imageMatch[1] : undefined

            posts.push({
              title: data.title || 'Untitled',
              description: data.description || '',
              date: data.date ? new Date(data.date).toISOString() : new Date().toISOString(),
              tags: Array.isArray(data.tags) ? data.tags : data.tags ? [data.tags] : [],
              slug: file.replace(/\.mdx$/, ''),
              type: type,
              image: image,
              content: content,
            })
          } catch (error) {
            console.error(`Error processing file ${filePath}:`, error)
          }
        }
      }
    } catch (error) {
      console.error(`Error reading directory ${filesPath}:`, error)
    }
  }

  console.log(`Total posts processed: ${posts.length}`)
  return posts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
}

---

### File Location: /workspaces/personal-web/iverfinne.no/tailwind.config.ts ###

import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;


---

